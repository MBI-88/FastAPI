Install pytest -> pip install pytest
Use in command line -> python -m unittest <script>

Generating tests with parametrize 

To help with this specific task, pytest provides the parametrize marker. In pytest,
a marker is a special decorator that's used to easily pass metadata to the test. Special
behaviors can then be implemented, depending on the markers used by the test

Here, parametrize allows us to pass several sets of variables that will be passed as
arguments to the test function. At runtime, each set will generate a new and independent
test. To understand this better, let's look at how to use this marker to generate several tests
for our add function

Our test function receives those parameters in arguments, each one named the way
you specified previously. Thus, you can use them at will in the test logic. As you can see,
the great benefit here is that we only have to write the assert statement once. Besides,
it's very quick to add a new test case: we just have to add another tuple to the
parametrize marker

Reusing test logic by creating fixtures

Now, how can we use this fixture? If you look at the test_address_country test,
you'll see some magic happening: by setting an address argument on the test function,
pytest automatically detects that it corresponds to the address fixture, executes it, and
passes its return value. Inside the test, we have our Address object ready to use. pytest
calls this requesting a fixture

Setting up testing tools for FastAPI with HTTPX

Fortunately, HTTPX, an HTTP client created by the same team as Starlette, allows us to
have a pure asynchronous HTTP client able to make requests to our FastAPI app. To make
this approach work, we'll need three libraries:

• HTTPX, the client that will perform HTTP requests
• asgi-lifepsan, a library for managing the startup and shutdown events
  of your FastAPI app programmatically
• pytest-asyncio, an extension of pytest that allows us to write
  asynchronous tests

pip install httpx asgi-lifespan pytest-asyncio

Of course, this function is decorated with the fixture decorator to make it a fixture
for pytest. You may have noticed that we added an argument called scope with a value
of session. This argument controls at which level the fixture should be instantiated.
By default, it's recreated at the beginning of each single test function. The session value
is the highest level, meaning that the fixture is only created once at the beginning of the
whole test run, which is relevant for our event loop. You can find out more about this
more advanced feature in the official documentation: https://docs.pytest.org/
en/latest/how-to/fixtures.html#scope-sharing-fixtures-acrossclasses-modules-packages-or-session

Besides this, you'll need the fixtures we defined in this section for all your tests.
Rather than repeating them again and again in all your test files, pytest allows
you to write global fixtures in a file named conftest.py. After putting
it in your tests folder, it will automatically be imported, allowing you to
request all the fixtures you define inside it. You can read more about this in the
official documentation at https://docs.pytest.org/en/latest/
reference/fixtures.html#conftest-py-sharingfixtures-across-multiple-files:

First of all, notice that the test function is defined as async. As we mentioned previously,
to make it work with pytest, we had to install pytest-asyncio. This extension provides
the asyncio marker: each asynchronous test should be decorated with this marker to
make it work properly. 

Writing tests for POST endpoints

The first thing you may have noticed is that we wrapped our two tests inside a class. While
not required in pytest, it could help you organize your tests; for example, to regroup tests
that concern a single endpoint. Notice that, in this case, we only have to decorate the class
with the asyncio marker; it will be automatically applied on single tests. Also, ensure
that you add the self argument to each test: since we are now inside a class, they
become methods.

Testing with a database

FastAPI provides a property called dependency_overrides, which is a dictionary
that maps original dependency functions with substitutes. Here, we directly used the
get_database function as a key. The rest of the fixture doesn't have to change. Now,
whenever the get_database dependency is injected into the application code, FastAPI
will automatically replace it with get_test_database. As a result, our endpoints will
now work with the test database instance

Notice that we used the autouse and scope arguments of the fixture decorator. The
first one tells pytest to automatically call this fixture even if it's not requested in any test.
In this case, it's convenient because we'll always ensure that the data has been created in
the database, without the risk of forgetting to request it in the tests. The other one, scope,
allows us, as we mentioned previously, to not run this fixture at the beginning of each test.
With the module value, the fixture will create the objects only once, at the beginning of
this particular test file. It helps us keep the test fast because in this case, it doesn't make
sense to recreate the posts before each test.

Once again, we yield the posts instead of returning them. This pattern allows us to delete
the test database after the tests run. By doing this, we're making sure that we always start
with a fresh database when we've run the tests.

Of course, to test this endpoint, we don't want to make real requests to the external API:
it may take time and could be subject to rate limiting. Besides, you may want to test
behavior that is not easy to reproduce in the real API, such as errors.
Thanks to dependency_overrides, it's very easy to replace our ExternalAPI
dependency class with another one that returns static data. In the following example,
you can see how we implemented such a test.

Writing tests for WebSocket endpoints

Unfortunately, we won't be able to reuse HTTPX since, at the time of writing, this client
can't communicate with WebSockets. For the time being, our best bet is to use the default
TestClient provided by Starlette.